#!/usr/bin/env node

/* eslint-disable no-param-reassign, no-console */
/* eslint import/no-extraneous-dependencies: ["error", {"devDependencies": true}] */

const commander = require('commander');
const glob = require('glob');
const packageJson = require('../package.json');
const outputFileSync = require('output-file-sync');
const readdir = require('fs-readdir-recursive');
const path = require('path');
const fs = require('fs');
const convert = require('../lib');

function batchTp(commander, filenames) {
  function canCompile(filename, ext) {
    const fileExt = path.extname(filename);
    return fileExt === ext;
  }

  function chmod(src, dest) {
    fs.chmodSync(dest, fs.statSync(src).mode);
  }

  function transform(filename, code, opts) {
    opts.filename = filename;
    const result = {};
    result.code = convert(code, opts);
    result.filename = filename;
    return result;
  }

  function compile(filename, opts) {
    try {
      const code = fs.readFileSync(filename, 'utf8');
      return transform(filename, code, opts);
    } catch (err) {
      throw err;
    }
  }

  function write(src, relative) {
    // remove extension and then append back on .js
    relative = `${relative.replace(/\.(\w*?)$/, '')}.js`;

    const dest = path.join(commander.outDir, relative);

    const data = compile(src, commander.opts);

    outputFileSync(dest, data.code);
    chmod(src, dest);

    console.log(`${src} -> ${dest}`);
  }

  function handleFile(src, filename) {
    if (canCompile(filename, commander.extension)) {
      write(src, filename);
    } else if (commander.copyFiles) {
      const dest = path.join(commander.outDir, filename);
      outputFileSync(dest, fs.readFileSync(src));
      chmod(src, dest);
    }
  }

  function handle(filename) {
    if (!fs.existsSync(filename)) return;

    const stat = fs.statSync(filename);

    if (stat.isDirectory(filename)) {
      const dirname = filename;

      readdir(dirname).forEach((fn) => {
        const src = path.join(dirname, fn);
        handleFile(src, fn);
      });
    } else {
      write(filename, filename);
    }
  }
  filenames.forEach(handle);
}

commander
  .version(packageJson.version)
  .option('-g, --glob [glob]', 'The glob you want to use', '**')
  .option('-e, --extension [extension]', 'File extensions to compile', 'ha')
  .option('-c, --opts [opts]', 'Options to hatp')
  .option('-o, --out-dir [outDir]', 'Directory to output')
  .option('-c, --copy-files', 'Copy files which don\'t need to be compiled')
  .parse(process.argv);

const filenames = glob.sync(commander.glob);

batchTp(commander, filenames);
